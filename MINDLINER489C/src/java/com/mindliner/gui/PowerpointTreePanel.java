/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mindliner.gui;

import com.mindliner.analysis.MlClassHandler;
import com.mindliner.cache.CacheEngineStatic;
import com.mindliner.cache.DefaultObjectAttributes;
import com.mindliner.clientobjects.MlClientClassHandler;
import com.mindliner.clientobjects.MlcImage;
import com.mindliner.clientobjects.mlcKnowlet;
import com.mindliner.clientobjects.mlcObject;
import com.mindliner.clientobjects.mlcObjectCollection;
import com.mindliner.clientobjects.mlcTask;
import com.mindliner.connector.CloudConnector;
import com.mindliner.connector.StreamUploadThread;
import com.mindliner.connector.UploadSource;
import com.mindliner.events.ObjectChangeManager;
import com.mindliner.gui.treemodel.ImageTreeNode;
import com.mindliner.gui.treemodel.ObjectTreeCellEditor;
import com.mindliner.gui.treemodel.ObjectTreeCellRenderer;
import com.mindliner.gui.treemodel.ObjectTreeNode;
import com.mindliner.img.icons.MlIconManager;
import com.mindliner.managers.ImportManagerRemote;
import com.mindliner.objects.transfer.MltImage;
import com.mindliner.objects.transfer.MltObject;
import com.mindliner.objects.transfer.mltKnowlet;
import com.mindliner.objects.transfer.mltObjectCollection;
import com.mindliner.objects.transfer.mltTask;
import com.mindliner.serveraccess.OnlineManager;
import com.mindliner.serveraccess.RemoteLookupAgent;
import java.awt.Cursor;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.naming.NamingException;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.ToolTipManager;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

/**
 * Displays the objects which should be created from the PPT presentation in a
 * tree. The user can delete nodes and change their type
 *
 * @author Dominic Plangger
 */
public class PowerpointTreePanel extends javax.swing.JPanel {

    private ObjectTreeNode tree;
    private PowerpointTreeDialog dialog = null; //surrounding dialog
    private int count = 1;

    public PowerpointTreePanel() {
        initComponents();
        configureComponents();
    }

    public void setTree(ObjectTreeNode tree) {
        this.tree = tree;
        updateTree();
    }

    public void setDialog(PowerpointTreeDialog dialog) {
        this.dialog = dialog;
    }

    private void updateTree() {
        DefaultTreeModel model = new DefaultTreeModel(tree);
        ObjectTree.setModel(model);
    }

    private void configureComponents() {
        ObjectTreeCellRenderer renderer = new ObjectTreeCellRenderer();
        ObjectTree.setCellRenderer(renderer);
        ObjectTree.setCellEditor(new ObjectTreeCellEditor(ObjectTree, renderer));

        // Needed for node tooltips (see http://docs.oracle.com/javase/1.4.2/docs/api/javax/swing/JTree.html#getToolTipText%28java.awt.event.MouseEvent%29)
        ToolTipManager.sharedInstance().registerComponent(ObjectTree);

        MouseListener ml = new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    TreePath path = ObjectTree.getPathForLocation(e.getX(), e.getY());
                    if (path != null) {
                        ObjectTree.startEditingAtPath(path);
                    }
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    TreePath path = ObjectTree.getPathForLocation(e.getX(), e.getY());
                    if (path != null) {
                        ObjectTree.setSelectionPath(path);
                        JPopupMenu popup = createPopup();
                        popup.show(e.getComponent(), e.getX(), e.getY());
                    }
                }
            }

        };
        ObjectTree.addMouseListener(ml);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TitlePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        NextButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        ObjectTree = new javax.swing.JTree();

        TitlePanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getStyle() | java.awt.Font.BOLD, jLabel1.getFont().getSize()+4));
        jLabel1.setText("Powerpoint Import");

        NextButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mindliner/img/icons/2424/add2-3.png"))); // NOI18N
        NextButton.setText("Create");
        NextButton.setBorder(null);
        NextButton.setPreferredSize(new java.awt.Dimension(93, 33));
        NextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextButtonActionPerformed(evt);
            }
        });

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/mindliner/resources/GUIElements"); // NOI18N
        jLabel4.setText(bundle.getString("PowerpointImportTreeLabel")); // NOI18N

        jButton1.setText("Discard");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout TitlePanelLayout = new javax.swing.GroupLayout(TitlePanel);
        TitlePanel.setLayout(TitlePanelLayout);
        TitlePanelLayout.setHorizontalGroup(
            TitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TitlePanelLayout.createSequentialGroup()
                .addGroup(TitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 153, Short.MAX_VALUE)
                .addComponent(NextButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1))
        );
        TitlePanelLayout.setVerticalGroup(
            TitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TitlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TitlePanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TitlePanelLayout.createSequentialGroup()
                        .addGroup(TitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(NextButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addContainerGap())))
        );

        ObjectTree.setEditable(true);
        jScrollPane1.setViewportView(ObjectTree);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(TitlePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(TitlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void NextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextButtonActionPerformed
        dialog.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try {
            if (OnlineManager.isOnline()) {
                int confId = DefaultObjectAttributes.getConfidentialityForDefaultClient().getId();
                int priority = DefaultObjectAttributes.getPriority().getId();
                DefaultMutableTreeNode root = new DefaultMutableTreeNode();
                List<ImageTreeNode> images = new ArrayList<>();
                // we use a counter to assign temporary unique IDs to image objects.
                // this will ensure that the following call to the server returns
                // the new real IDs of the image objects (see ImportManagerRemote.importObjectTree javadoc).
                // This allows us to refer to the new objects after the creation
                count = 1;
                copyToTransferTree(tree, root, images);

                ImportManagerRemote importManager = (ImportManagerRemote) RemoteLookupAgent.getManagerForClass(ImportManagerRemote.class);
                Map<Integer, Integer> ids = importManager.importObjectTree(root, confId, priority);
                int rootId = ids.get(-1);
                mlcObject newRoot = CacheEngineStatic.getObject(rootId);
                ObjectChangeManager.objectCreated(newRoot);

                // upload images to google drive
                uploadImages(images, ids);
            } else {
                JOptionPane.showMessageDialog(null, "Powerpoint import can only be used in online mode.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NamingException | HeadlessException ex) {
            Logger.getLogger(PowerpointTreePanel.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Unexpected error while creating Mindliner objects.", "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            dialog.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            dialog.setVisible(false);
        }
    }//GEN-LAST:event_NextButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dialog.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton NextButton;
    private javax.swing.JTree ObjectTree;
    private javax.swing.JPanel TitlePanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables

    private JPopupMenu createPopup() {
        ResourceBundle bundle = ResourceBundle.getBundle("com/mindliner/gui/GuiElements");
        JPopupMenu jPopup = new JPopupMenu();

        // DELETE MENU - to delete a node
        JMenuItem delete = new JMenuItem();
        delete.setText(bundle.getString("TreeDeleteMenu"));
        delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mindliner/img/icons/1616/sign_warning.png")));
        delete.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                TreePath path = ObjectTree.getSelectionPath();
                ObjectTreeNode node = (ObjectTreeNode) path.getLastPathComponent();
                TreeNode parentNode = node.getParent();
                node.removeFromParent();
                DefaultTreeModel model = (DefaultTreeModel) ObjectTree.getModel();
                model.nodeStructureChanged(parentNode);
            }
        });
        jPopup.add(delete);

        // TYPE MENU - to change the type of the object
        JMenu type = new JMenu();
        type.setText("Type");
        ButtonGroup group = new ButtonGroup();
        List<Class> objectTypes = new ArrayList<>();
        objectTypes.add(mlcKnowlet.class);
        objectTypes.add(mlcObjectCollection.class);
        objectTypes.add(mlcTask.class);
        TreePath path = ObjectTree.getSelectionPath();
        ObjectTreeNode node = (ObjectTreeNode) path.getLastPathComponent();
        Class selClass = node.getUserObject().getClass();
        for (final Class c : objectTypes) {
            JRadioButtonMenuItem item = new JRadioButtonMenuItem();
            item.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    // do nothing if the same type is selected

                    TreePath path = ObjectTree.getSelectionPath();
                    ObjectTreeNode node = (ObjectTreeNode) path.getLastPathComponent();
                    mlcObject obj = (mlcObject) node.getUserObject();
                    try {
                        mlcObject newObj = (mlcObject) c.newInstance();
                        newObj.setHeadline(obj.getHeadline());
                        newObj.setDescription(obj.getDescription());
                        node.setUserObject(newObj);
                        DefaultTreeModel model = (DefaultTreeModel) ObjectTree.getModel();
                        model.nodeChanged(node);
                    } catch (IllegalAccessException | InstantiationException ex) {
                        Logger.getLogger(PowerpointTreePanel.class.getName()).log(Level.SEVERE, "Could not instantiate new object type: " + c, ex);
                    }

                }
            });
            setIconAndText(item, c);

            // select the current type of the object
            if (c.equals(selClass)) {
                item.setSelected(true);
            }
            group.add(item);
            type.add(item);
        }

        jPopup.add(type);

        return jPopup;
    }

    private void setIconAndText(JRadioButtonMenuItem item, Class c) {
        MlClassHandler.MindlinerObjectType type = MlClientClassHandler.getTypeByClass(c);
        String text = MlClientClassHandler.getNameByType(type);
        item.setText(text);
        ImageIcon ic = MlIconManager.getIconForType(type);
        item.setIcon(ic);
    }

    // converts mindliner client objects to transfer objects
    private void copyToTransferTree(ObjectTreeNode tree, DefaultMutableTreeNode targetTree, List<ImageTreeNode> images) {
        mlcObject oldObj = (mlcObject) tree.getUserObject();
        MltObject transfObj;
        if (oldObj instanceof mlcKnowlet) {
            transfObj = new mltKnowlet();
        } else if (oldObj instanceof mlcObjectCollection) {
            transfObj = new mltObjectCollection();
        } else if (oldObj instanceof mlcTask) {
            transfObj = new mltTask();
        } else if (oldObj instanceof MlcImage) {
            transfObj = new MltImage();
            transfObj.setId(count);
            oldObj.setId(count);
            count++;
        } else {
            throw new IllegalArgumentException("Unsupported object type [" + oldObj.getClass() + "]");
        }
        transfObj.setHeadline(oldObj.getHeadline());
        transfObj.setDescription(oldObj.getDescription());
        Date now = new Date();
        transfObj.setCreationDate(now);
        transfObj.setModificationDate(now);
        targetTree.setUserObject(transfObj);

        Enumeration e = tree.children();
        while (e.hasMoreElements()) {
            ObjectTreeNode child = (ObjectTreeNode) e.nextElement();
            // only use DefaultMutableTreeNode for serializing as ObjectTreeNode is only known to the client
            DefaultMutableTreeNode targetChild = new DefaultMutableTreeNode();
            if (child instanceof ImageTreeNode) {
                // remember the image nodes such that we can upload them afterwards to a cloud service
                ImageTreeNode itn = (ImageTreeNode) child;
                images.add(itn);
            }
            targetTree.add(targetChild);
            copyToTransferTree(child, targetChild, images);
        }
    }

    private void uploadImages(List<ImageTreeNode> images, Map<Integer, Integer> ids) {
        CloudConnector connector = CloudConnector.getCurrentConnector();
        if (connector == null) {
            return;
        }

        List<Integer> idList = new ArrayList<>();
        List<UploadSource> sources = new ArrayList<>();

        for (ImageTreeNode img : images) {
            mlcObject obj = (mlcObject) img.getUserObject();
            idList.add(ids.get(obj.getId()));
            UploadSource us = new UploadSource(img.data, obj.getHeadline(), img.mime);
            sources.add(us);
        }

        // authentication needs to be done only once
        if (!connector.authenticate()) {
            return;
        }

        // We need to fetch the objects first before we can modify them        
        List<mlcObject> objects = CacheEngineStatic.getObjects(idList);

        // start asynchronous file uploader
        StreamUploadThread uploader = new StreamUploadThread(connector, sources, objects);
        uploader.execute();
    }

}
