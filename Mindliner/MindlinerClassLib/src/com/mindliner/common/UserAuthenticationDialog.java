/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mindliner.common;

import com.mindliner.entities.MlAuthenticationGroups;
import com.mindliner.managers.UserManagerRemote;
import java.awt.Frame;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 * This class lets the master admin configure authentication parameters for a
 * user.
 *
 * @author Marius Messerli
 */
public class UserAuthenticationDialog extends javax.swing.JDialog {

    private int userId;
    private UserManagerRemote userManager;
    private boolean requestAdminRole = false;
    private boolean passwordChanged = false;

    /**
     * Constructor
     *
     * @param user The user for which the authentication is to be edited.
     * @param userManager A reference to the user manager.
     * @param owner inherited
     * @param modal inherited
     * @param requestAdminRole If true (and the user is indeed part of the admin
     * group) the role selector is editable. Otherwise the role selector is not
     * editable.
     */
    public UserAuthenticationDialog(int userId, UserManagerRemote userManager, Frame owner, boolean modal, boolean requestAdminRole) {
        super(owner, modal);
        this.userId = userId;
        this.userManager = userManager;
        this.requestAdminRole = requestAdminRole;
        initComponents();
        configureComponents();
    }

    private boolean isAdminRole() {
        if (requestAdminRole == false) {
            return false;
        }
        return userManager.isInRole("MasterAdmin");
    }

    private void configureComponents() {
        List<MlAuthenticationGroups> authGroups = userManager.getAllAuthenticationGroups();
        DefaultListModel dlm = new DefaultListModel();
        for (MlAuthenticationGroups g : authGroups) {
            dlm.addElement(new ObjectCheckBox(g, false));
        }
        RoleList.setModel(dlm);
        updateRoleControlsVisibility(isAdminRole());
        setLocationRelativeTo(null);
    }
    
    private void updateRoleControlsVisibility(boolean isVisible){
        RoleList.setVisible(isVisible);
        RoleLabel.setVisible(isVisible);
        RoleScrollPane.setVisible(isVisible);
    }

    private boolean isPassowordsEqual() {
        if (Password.getPassword().length != Password2.getPassword().length) {
            return false;
        }
        for (int i = 0; i < Password.getPassword().length; i++) {
            if (Password.getPassword()[i] != Password2.getPassword()[i]) {
                return false;
            }
        }
        return true;
    }

    public boolean isPasswordChanged() {
        return passwordChanged;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel25 = new javax.swing.JLabel();
        Password = new javax.swing.JPasswordField();
        jLabel27 = new javax.swing.JLabel();
        Password2 = new javax.swing.JPasswordField();
        RoleLabel = new javax.swing.JLabel();
        SecurityDialogSaveButton = new javax.swing.JButton();
        RoleScrollPane = new javax.swing.JScrollPane();
        RoleList = new com.mindliner.common.CheckBoxList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/mindliner/common/Bundle"); // NOI18N
        setTitle(bundle.getString("AuthenticationDialogTitle")); // NOI18N

        jLabel25.setText(bundle.getString("SecurityDialogPasswordLabel")); // NOI18N

        Password.setColumns(14);

        jLabel27.setText(bundle.getString("SecurityDialogPasswordField2Label")); // NOI18N

        Password2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                Password2FocusLost(evt);
            }
        });

        RoleLabel.setText(bundle.getString("SecurityDialogRoleCombo")); // NOI18N

        SecurityDialogSaveButton.setText(bundle.getString("SecurityDialogSaveButton")); // NOI18N
        SecurityDialogSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SecurityDialogSaveButtonActionPerformed(evt);
            }
        });

        RoleList.setSelectionForeground(new java.awt.Color(0, 0, 0));
        RoleScrollPane.setViewportView(RoleList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel27)
                    .addComponent(jLabel25)
                    .addComponent(RoleLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(SecurityDialogSaveButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(Password2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RoleScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                            .addComponent(Password))
                        .addGap(0, 5, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(Password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel27)
                    .addComponent(Password2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(RoleLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RoleScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(SecurityDialogSaveButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Password2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Password2FocusLost
        if (!isPassowordsEqual()) {
            JOptionPane.showMessageDialog(this, "Passwords don't match", "Password Check", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_Password2FocusLost

    private void SecurityDialogSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SecurityDialogSaveButtonActionPerformed

        if (Password.getPassword().length < 6) {
            JOptionPane.showMessageDialog(this, "The password is less than 6 characters", "Password Check", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!isPassowordsEqual()) {
            JOptionPane.showMessageDialog(this, "Passwords don't match", "Password Check", JOptionPane.ERROR_MESSAGE);
            return;
        }

        List<Integer> rolesIds = null;
        if (isAdminRole()) {
            if (RoleList.getCheckedItems().isEmpty()) {
                JOptionPane.showMessageDialog(this, "The user needs at least one role checked", "Role Check", JOptionPane.ERROR_MESSAGE);
                return;
            }
            rolesIds = new ArrayList<Integer>();
            for (Object o : RoleList.getCheckedItems()) {
                if (o instanceof ObjectCheckBox) {
                    ObjectCheckBox ocx = (ObjectCheckBox) o;
                    MlAuthenticationGroups g = (MlAuthenticationGroups) ocx.getValue();
                    rolesIds.add(g.getId());
                }
            }
        }

        try {
            setVisible(false);
            String encodedPass = MlPasswordEncoder.encodePassword(Password.getPassword());
            if (isAdminRole()) {
                userManager.updateUserAuth(userId, encodedPass, rolesIds);
                passwordChanged = true;
            } else {
                userManager.updatePassword(encodedPass);
                passwordChanged = true;
            }
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(UserAuthenticationDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SecurityDialogSaveButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField Password;
    private javax.swing.JPasswordField Password2;
    private javax.swing.JLabel RoleLabel;
    private com.mindliner.common.CheckBoxList RoleList;
    private javax.swing.JScrollPane RoleScrollPane;
    private javax.swing.JButton SecurityDialogSaveButton;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel27;
    // End of variables declaration//GEN-END:variables
}
