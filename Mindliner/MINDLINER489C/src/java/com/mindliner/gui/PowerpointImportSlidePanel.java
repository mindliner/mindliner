/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mindliner.gui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import org.apache.poi.hslf.model.Slide;
import org.apache.poi.xslf.usermodel.XSLFSlide;

/**
 * Corresponds to one Slide preview of a PPT presentation
 * Preview supports pan and zoom.
 * @author Dominic Plangger
 */
public class PowerpointImportSlidePanel extends javax.swing.JPanel {
    
    private XSLFSlide xmlSlide = null;
    private Slide slide = null;
    private boolean isXmlPpt = false;
    private int index;
    private double zoom = 1;
    private static final int IMAGE_HEIGHT = 120;

    /**
     * Creates new form PowerpointImportSlidePanel
     */
    public PowerpointImportSlidePanel() {
        initComponents();
        // mouse listener to support zoom (pan is supported natively)
        ImageView.addMouseWheelListener(new MouseWheelListener() {

            @Override
            public void mouseWheelMoved(MouseWheelEvent e) {
                if (e.getWheelRotation() <= 0) {
                    zoom += 0.2;
                }
                else {
                    if (zoom > 1) {
                        zoom -= 0.2;
                    }
                }
                updateSlide();
            }
        });
    }

    public void setXmlSlide(XSLFSlide slide, int index) {
        this.xmlSlide = slide;
        this.index = index;
        isXmlPpt = true;
        updateSlide();
    }
    
    
      public void setSlide(Slide slide, int index) {
        this.slide = slide;
        this.index = index;
        updateSlide();
    }
    

    public XSLFSlide getXmlSlide() {
        return xmlSlide;
    }

    public Slide getSlide() {
        return slide;
    }

  
    
    
    public void setSelected(boolean isSelected) {
        ActiveCheckBox.setSelected(isSelected);
    }
    
    public boolean isSelected(){
        return ActiveCheckBox.isSelected();
    }
    
    private void updateSlide() {
        ActiveCheckBox.setText("Slide " + Integer.toString(index+1));
        // Support of different slide formats, we only state the height of the preview.
        // The preview width depends on the slide width
        Dimension pgsize = isXmlPpt ? xmlSlide.getSlideShow().getPageSize() : slide.getSlideShow().getPageSize();
        double f = IMAGE_HEIGHT / pgsize.getHeight();
        int imageWidth = (int) (pgsize.getWidth() * f);
        
        ImageView.setPreferredSize(new Dimension(imageWidth, IMAGE_HEIGHT));
        
        AffineTransform at = new AffineTransform();
        at.setToScale(f * zoom, f * zoom);
        
        BufferedImage img = new BufferedImage((int)(imageWidth * zoom), (int)(IMAGE_HEIGHT * zoom), BufferedImage.TYPE_INT_RGB);
        Graphics2D graphics = img.createGraphics();
        graphics.setTransform(at);
        
        graphics.setPaint(Color.white);
        graphics.fill(new Rectangle2D.Float(0, 0, (int)(imageWidth * zoom), (int)(IMAGE_HEIGHT * zoom)));
        if (isXmlPpt) {
            xmlSlide.draw(graphics);
        }
        else {
            slide.draw(graphics);
        }
        ImageView.setImage(img);
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainPanel = new javax.swing.JPanel();
        ImageView = new org.jdesktop.swingx.JXImageView();
        ActiveCheckBox = new javax.swing.JCheckBox();

        ImageView.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout ImageViewLayout = new javax.swing.GroupLayout(ImageView);
        ImageView.setLayout(ImageViewLayout);
        ImageViewLayout.setHorizontalGroup(
            ImageViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );
        ImageViewLayout.setVerticalGroup(
            ImageViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        ActiveCheckBox.setSelected(true);
        ActiveCheckBox.setText("Slide");
        ActiveCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        javax.swing.GroupLayout MainPanelLayout = new javax.swing.GroupLayout(MainPanel);
        MainPanel.setLayout(MainPanelLayout);
        MainPanelLayout.setHorizontalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addComponent(ImageView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ActiveCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        MainPanelLayout.setVerticalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addComponent(ActiveCheckBox)
                .addGap(3, 3, 3)
                .addComponent(ImageView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(MainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox ActiveCheckBox;
    private org.jdesktop.swingx.JXImageView ImageView;
    private javax.swing.JPanel MainPanel;
    // End of variables declaration//GEN-END:variables

}
