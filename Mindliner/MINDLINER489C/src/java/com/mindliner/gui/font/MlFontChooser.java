/*
 * mlFontChooser.java
 *
 * Created on Dec 4, 2008, 11:55:32 AM
 */
package com.mindliner.gui.font;

import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.event.KeyEvent;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 * This class lets the user choose a font and see an example.
 *
 * @author Marius Messerli
 */
public class MlFontChooser extends JPanel {

    private String persistenceIdentifyer;
    private final String[] fontNames = GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
    private boolean initialized = false;

    /**
     * The no-arg constructor allow me to use this component in the Swing
     * GUI designer but then I need to make sure the persistenceIdentifier
     * is set later, so I don't set initilized to true yet
     */
    public MlFontChooser() {
        initComponents();
    }

    /**
     * Constructor for the font chooser
     *
     * @param identifyer A key that is used as prefix when persisting the font
     * between sessions, specify an empty string if you don't want to persist
     */
    
    
    public MlFontChooser(String identifyer) {
        initComponents();
        persistenceIdentifyer = identifyer;
        configureComponents();
        initialized = true;
    }

    @Override
    public void setFont(Font f) {
        super.setFont(f);
        if (initialized) {
            FontName.setSelectedItem(f.getFamily());
            FontSize.setText(Integer.toString(f.getSize()));
            FontBold.setSelected(f.isBold());
            FontItalics.setSelected(f.isItalic());
            redrawFontLabel();
        }
    }

    private void configureComponents() {
        setFont(FontPreferences.getFont(persistenceIdentifyer));
        DefaultComboBoxModel boxmodel = new DefaultComboBoxModel();
        for (String fontName : fontNames) {
            boxmodel.addElement(fontName);
        }
        FontName.setModel(boxmodel);
        FontName.setSelectedItem(getFont().getName());
    }

    private void updateCurrentFont() {
        if (!initialized) {
            // avoid updates during initialization
            return;
        }
        int style = Font.PLAIN;
        if (FontBold.isSelected()) {
            style = Font.BOLD;
        }
        if (FontItalics.isSelected()) {
            style += Font.ITALIC;
        }
        try {
            setFont(new Font(
                    (String) FontName.getSelectedItem(),
                    style,
                    Integer.parseInt(FontSize.getText())));
            FontPreferences.setFont(persistenceIdentifyer, getFont());
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Font Choices", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void redrawFontLabel() {
        FontTestLabel.setFont(getFont());
        FontTestLabel.repaint();
    }

    public void setPersistenceIdentifyer(String persistenceIdentifyer) {
        this.persistenceIdentifyer = persistenceIdentifyer;
        configureComponents();
        initialized = true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel16 = new javax.swing.JLabel();
        FontName = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        FontSize = new javax.swing.JTextField();
        FontBold = new javax.swing.JCheckBox();
        FontTestLabel = new javax.swing.JLabel();
        FontItalics = new javax.swing.JCheckBox();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/mindliner/resources/Preferences"); // NOI18N
        jLabel16.setText(bundle.getString("PrefTableFontName")); // NOI18N

        FontName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        FontName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FontNameActionPerformed(evt);
            }
        });

        jLabel15.setText(bundle.getString("PrefDialogTableFontSizeLabel")); // NOI18N

        FontSize.setColumns(3);
        FontSize.setText("12");
        FontSize.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                FontSizeKeyReleased(evt);
            }
        });

        FontBold.setText(bundle.getString("PreferenceDialogTableFontBold")); // NOI18N
        FontBold.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        FontBold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FontBoldActionPerformed(evt);
            }
        });

        FontTestLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        FontTestLabel.setForeground(new java.awt.Color(61, 87, 182));
        FontTestLabel.setText(bundle.getString("TableConfigFontTestLabel")); // NOI18N

        FontItalics.setText(bundle.getString("FontChooserItalicCheckbox")); // NOI18N
        FontItalics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FontItalicsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16)
                    .addComponent(jLabel15))
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FontName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(FontSize, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FontBold, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FontItalics)
                        .addGap(0, 152, Short.MAX_VALUE))
                    .addComponent(FontTestLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FontName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(FontSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(FontBold)
                        .addComponent(FontItalics)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FontTestLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void FontNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FontNameActionPerformed
        updateCurrentFont();
}//GEN-LAST:event_FontNameActionPerformed

    private void FontBoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FontBoldActionPerformed
        updateCurrentFont();
}//GEN-LAST:event_FontBoldActionPerformed

    private void FontItalicsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FontItalicsActionPerformed
        updateCurrentFont();
    }//GEN-LAST:event_FontItalicsActionPerformed

    private void FontSizeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FontSizeKeyReleased
        // font size > 99 is just an editing artifact
        if (!FontSize.getText().isEmpty() && FontSize.getText().length() < 3) {
            updateCurrentFont();
        }
    }//GEN-LAST:event_FontSizeKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox FontBold;
    private javax.swing.JCheckBox FontItalics;
    private javax.swing.JComboBox FontName;
    private javax.swing.JTextField FontSize;
    private javax.swing.JLabel FontTestLabel;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    // End of variables declaration//GEN-END:variables

}
